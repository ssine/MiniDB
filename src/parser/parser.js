/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[2,4],$V1=[1,11],$V2=[1,12],$V3=[1,13],$V4=[1,19],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[1,21],$V9=[5,6,76],$Va=[1,28],$Vb=[5,6,18,23,24,33,58,65,66,67,68,69,72,76],$Vc=[24,59],$Vd=[2,68],$Ve=[1,49],$Vf=[1,70],$Vg=[1,71],$Vh=[5,6,24,69,76],$Vi=[5,6,24,65,66,67,69,76],$Vj=[5,6,24,65,66,67,68,69,76],$Vk=[20,24],$Vl=[1,90],$Vm=[1,93],$Vn=[1,94],$Vo=[1,95],$Vp=[1,96],$Vq=[1,97],$Vr=[1,98],$Vs=[1,99],$Vt=[1,100],$Vu=[5,6,20,24,39,40,41,42,43,44,45,46,65,66,67,69,76],$Vv=[5,6,24,76],$Vw=[5,6,20,24,39,40,45,46,65,66,67,69,76];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"main":3,"sql_stmt_list":4,"EOF":5,"SEMICOLON":6,"sql_stmt":7,"create_table_stmt":8,"drop_table_stmt":9,"insert_stmt":10,"select_stmt":11,"delete_stmt":12,"update_stmt":13,"transaction_stmt":14,"CREATE":15,"TABLE":16,"database_table_name":17,"LPAR":18,"column_defs":19,"RPAR":20,"name":21,"DOT":22,"LITERAL":23,"COMMA":24,"column_def":25,"type_name":26,"DROP":27,"INSERT":28,"INTO":29,"columns_par":30,"insert_values":31,"columns":32,"VALUES":33,"values":34,"value":35,"subvalues":36,"expr":37,"literal_value":38,"EQ":39,"NE":40,"GT":41,"GE":42,"LT":43,"LE":44,"AND":45,"OR":46,"NUMBER":47,"STRING":48,"compound_selects":49,"select":50,"SELECT":51,"result_columns":52,"from":53,"where":54,"column_list":55,"STAR":56,"alias":57,"AS":58,"FROM":59,"join_clause":60,"table_or_subquery":61,"join_operator":62,"join_constraint":63,"join_type":64,"JOIN":65,"INNER":66,"CROSS":67,"ON":68,"WHERE":69,"DELETE":70,"UPDATE":71,"SET":72,"column_expr_list":73,"column_expr":74,"BEGIN":75,"COMMIT":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",15:"CREATE",16:"TABLE",18:"LPAR",20:"RPAR",22:"DOT",23:"LITERAL",24:"COMMA",27:"DROP",28:"INSERT",29:"INTO",33:"VALUES",39:"EQ",40:"NE",41:"GT",42:"GE",43:"LT",44:"LE",45:"AND",46:"OR",47:"NUMBER",48:"STRING",51:"SELECT",56:"STAR",58:"AS",59:"FROM",65:"JOIN",66:"INNER",67:"CROSS",68:"ON",69:"WHERE",70:"DELETE",71:"UPDATE",72:"SET",75:"BEGIN",76:"COMMIT"},
productions_: [0,[3,2],[4,3],[4,1],[7,0],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[8,6],[17,3],[17,1],[21,1],[19,3],[19,1],[25,2],[26,1],[9,3],[10,5],[30,0],[30,3],[32,3],[32,1],[31,2],[34,3],[34,1],[35,3],[36,3],[36,1],[37,1],[37,1],[37,3],[37,5],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[38,1],[38,1],[11,1],[49,1],[50,4],[52,1],[52,1],[55,3],[55,1],[57,0],[57,1],[57,2],[53,2],[60,1],[60,4],[61,2],[62,1],[62,2],[64,0],[64,1],[64,1],[63,0],[63,2],[54,2],[54,0],[12,4],[13,5],[73,3],[73,1],[74,3],[14,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

            this.$ = $$[$0-1];
            return this.$;
        
break;
case 2:
 this.$ = $$[$0-2]; if($$[$0]) this.$.push($$[$0]); 
break;
case 3: case 17: case 25: case 28: case 31: case 47: case 52: case 57: case 72:
 this.$ = [$$[$0]]; 
break;
case 4: case 22: case 65:
 this.$ = undefined; 
break;
case 12:

            this.$ = {
                statement: 'CREATE TABLE',
                column_defs: $$[$0-1]
            };
            yy.extend(this.$, $$[$0-3]);
        
break;
case 13:
 this.$ = {database:$$[$0-2], table:$$[$0]}; 
break;
case 14:
 this.$ = {table:$$[$0]}; 
break;
case 15: case 32:
 this.$ = $$[$0]; 
break;
case 16: case 24: case 27: case 30: case 51: case 71:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 18:
 this.$ = {column:$$[$0-1]}; yy.extend(this.$, $$[$0]); 
break;
case 19:
 this.$ = {type: $$[$0].toUpperCase()}; 
break;
case 20:
 
            this.$ = {statement: 'DROP TABLE'}; 
            yy.extend(this.$,$$[$0]);
        
break;
case 21:

            this.$ = {statement: 'INSERT'};
            yy.extend(this.$, $$[$0-2], $$[$0-1], $$[$0]);
        
break;
case 23:
 this.$ = {columns: $$[$0-1]}
break;
case 26:
 this.$ = {values: $$[$0]}; 
break;
case 29: case 61:
 this.$ = $$[$0-1]; 
break;
case 33:
 this.$ = {column: $$[$0]}; 
break;
case 34:
 this.$ = {table: $$[$0-2], column: $$[$0]}; 
break;
case 35:
 this.$ = {database: $$[$0-4], table: $$[$0-2], column: $$[$0]}; 
break;
case 36:
 this.$ = {op: 'EQ', left: $$[$0-2], right: $$[$0]}; 
break;
case 37:
 this.$ = {op: 'NE', left: $$[$0-2], right: $$[$0]}; 
break;
case 38:
 this.$ = {op: 'GT', left: $$[$0-2], right: $$[$0]}; 
break;
case 39:
 this.$ = {op: 'GE', left: $$[$0-2], right: $$[$0]}; 
break;
case 40:
 this.$ = {op: 'LT', left: $$[$0-2], right: $$[$0]}; 
break;
case 41:
 this.$ = {op: 'LE', left: $$[$0-2], right: $$[$0]}; 
break;
case 42:
 this.$ = {op: 'AND', left: $$[$0-2], right: $$[$0]}; 
break;
case 43:
 this.$ = {op: 'OR', left: $$[$0-2], right: $$[$0]}; 
break;
case 44:
 this.$ = {type:'number', data: parseFloat($$[$0])}; 
break;
case 45:
 this.$ = {type:'string', data: $$[$0].substring(1, $$[$0].length - 1)}
break;
case 46:

            this.$ = {statement: 'SELECT', selects: $$[$0]};
        
break;
case 48:

            this.$ = {};
            yy.extend(this.$, $$[$0-2], $$[$0-1], $$[$0]);
        
break;
case 49:
 this.$ = {star: false, result_columns: $$[$0]}; 
break;
case 50:
 this.$ = {star: true}; 
break;
case 53:
 this.$ = undefined;
break;
case 54: case 55:
 this.$ = {alias: $$[$0]};
break;
case 56:
 this.$ = {from: $$[$0]}; 
break;
case 58:

            yy.extend($$[$0-1], $$[$0-2], $$[$0]);
            this.$.push($$[$0-1]);
        
break;
case 59:
 this.$ = $$[$0-1]; yy.extend(this.$, $$[$0]); 
break;
case 60: case 64:
 this.$ = {join_type: 'CROSS'}; 
break;
case 62: case 63:
 this.$ = {join_type: 'INNER'}; 
break;
case 66:
 this.$ = {on: $$[$0]}; 
break;
case 67:
 this.$ = {where: $$[$0]}; 
break;
case 69:
 
            this.$ = {statement:'DELETE'};
            yy.extend(this.$,$$[$0-1]);
            yy.extend(this.$,$$[$0]);
        
break;
case 70:
 
            this.$ = {statement: 'UPDATE', set: $$[$0-1]};
            yy.extend(this.$,$$[$0-3]);
            yy.extend(this.$,$$[$0]);
        
break;
case 73:
 this.$ = {column:$$[$0-2], expr: $$[$0]}; 
break;
case 74:

            this.$ = {statement: 'TRANSACTION', contents: $$[$0-2]}
        
break;
}
},
table: [o([5,6],$V0,{3:1,4:2,7:3,8:4,9:5,10:6,11:7,12:8,13:9,14:10,49:14,50:18,15:$V1,27:$V2,28:$V3,51:$V4,70:$V5,71:$V6,75:$V7}),{1:[3]},{5:[1,20],6:$V8},o($V9,[2,3]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),{16:[1,22]},{16:[1,23]},{29:[1,24]},o($V9,[2,46]),{59:[1,25]},{17:26,21:27,23:$Va},{6:[1,29]},o($V9,[2,47]),{21:33,23:$Va,52:30,55:31,56:[1,32]},{1:[2,1]},o($V9,$V0,{8:4,9:5,10:6,11:7,12:8,13:9,14:10,49:14,50:18,7:34,15:$V1,27:$V2,28:$V3,51:$V4,70:$V5,71:$V6,75:$V7}),{17:35,21:27,23:$Va},{17:36,21:27,23:$Va},{17:37,21:27,23:$Va},{17:38,21:27,23:$Va},{72:[1,39]},o($Vb,[2,14],{22:[1,40]}),o([5,6,18,20,22,23,24,33,39,40,41,42,43,44,45,46,58,59,65,66,67,68,69,72,76],[2,15]),o([6,76],$V0,{7:3,8:4,9:5,10:6,11:7,12:8,13:9,14:10,49:14,50:18,4:41,15:$V1,27:$V2,28:$V3,51:$V4,70:$V5,71:$V6,75:$V7}),{53:42,59:[1,43]},{24:[1,44],59:[2,49]},{59:[2,50]},o($Vc,[2,52]),o($V9,[2,2]),{18:[1,45]},o($V9,[2,20]),{18:[1,47],30:46,33:[2,22]},o($V9,$Vd,{54:48,69:$Ve}),{21:52,23:$Va,73:50,74:51},{21:53,23:$Va},{6:$V8,76:[1,54]},o($V9,$Vd,{54:55,69:$Ve}),{17:58,21:27,23:$Va,60:56,61:57},{21:59,23:$Va},{19:60,21:62,23:$Va,25:61},{31:63,33:[1,64]},{21:66,23:$Va,32:65},o($V9,[2,69]),{21:69,23:$Va,37:67,38:68,47:$Vf,48:$Vg},o($V9,$Vd,{54:72,24:[1,73],69:$Ve}),o($Vh,[2,72]),{39:[1,74]},o($Vb,[2,13]),{6:[1,75]},o($V9,[2,48]),o([5,6,69,76],[2,56],{62:76,64:78,24:[1,77],65:[2,62],66:[1,79],67:[1,80]}),o($Vi,[2,57]),o($Vj,[2,53],{57:81,21:82,23:$Va,58:[1,83]}),o($Vc,[2,51]),{20:[1,84],24:[1,85]},o($Vk,[2,17]),{21:87,23:$Va,26:86},o($V9,[2,21]),{18:$Vl,34:88,35:89},{20:[1,91],24:[1,92]},o($Vk,[2,25]),o($V9,[2,67],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vu,[2,32]),o($Vu,[2,33],{22:[1,101]}),o($Vu,[2,44]),o($Vu,[2,45]),o($V9,[2,70]),{21:52,23:$Va,74:102},{21:69,23:$Va,37:103,38:68,47:$Vf,48:$Vg},o($V9,[2,74]),{17:58,21:27,23:$Va,61:104},{23:[2,60]},{65:[1,105]},{65:[2,63]},{65:[2,64]},o($Vj,[2,59]),o($Vj,[2,54]),{21:106,23:$Va},o($V9,[2,12]),{21:62,23:$Va,25:107},o($Vk,[2,18]),o($Vk,[2,19]),o($V9,[2,26],{24:[1,108]}),o($Vv,[2,28]),{21:69,23:$Va,36:109,37:110,38:68,47:$Vf,48:$Vg},{33:[2,23]},{21:111,23:$Va},{21:69,23:$Va,37:112,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:113,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:114,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:115,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:116,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:117,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:118,38:68,47:$Vf,48:$Vg},{21:69,23:$Va,37:119,38:68,47:$Vf,48:$Vg},{21:120,23:$Va},o($Vh,[2,71]),o($Vh,[2,73],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vi,[2,65],{63:121,68:[1,122]}),{23:[2,61]},o($Vj,[2,55]),o($Vk,[2,16]),{18:$Vl,35:123},{20:[1,124],24:[1,125]},o($Vk,[2,31],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vk,[2,24]),o($Vw,[2,36],{41:$Vo,42:$Vp,43:$Vq,44:$Vr}),o($Vw,[2,37],{41:$Vo,42:$Vp,43:$Vq,44:$Vr}),o($Vu,[2,38]),o($Vu,[2,39]),o($Vu,[2,40]),o($Vu,[2,41]),o([5,6,20,24,45,46,65,66,67,69,76],[2,42],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr}),o([5,6,20,24,46,65,66,67,69,76],[2,43],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs}),o($Vu,[2,34],{22:[1,126]}),o($Vi,[2,58]),{21:69,23:$Va,37:127,38:68,47:$Vf,48:$Vg},o($Vv,[2,27]),o($Vv,[2,29]),{21:69,23:$Va,37:128,38:68,47:$Vf,48:$Vg},{21:129,23:$Va},o($Vi,[2,66],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vk,[2,30],{39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,44:$Vr,45:$Vs,46:$Vt}),o($Vu,[2,35])],
defaultActions: {20:[2,1],32:[2,50],77:[2,60],79:[2,63],80:[2,64],91:[2,23],105:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 48
break;
case 1:/* skip -- comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 15
break;
case 4:return 16
break;
case 5:return 'DATABASE'
break;
case 6:return 70
break;
case 7:return 28
break;
case 8:return 71
break;
case 9:return 72
break;
case 10:return 27
break;
case 11:return 29
break;
case 12:return 33
break;
case 13:return 51
break;
case 14:return 58
break;
case 15:return 59
break;
case 16:return 65
break;
case 17:return 66
break;
case 18:return 'OUTER'
break;
case 19:return 67
break;
case 20:return 68
break;
case 21:return 69
break;
case 22:return 45
break;
case 23:return 46
break;
case 24:return 75
break;
case 25:return 76
break;
case 26:return 47
break;
case 27:return 47
break;
case 28:return 'PLUS'
break;
case 29:return 'MINUS'
break;
case 30:return 56
break;
case 31:return 'SLASH'
break;
case 32:return 'REM'
break;
case 33:return 'RSHIFT'
break;
case 34:return 'LSHIFT'
break;
case 35:return 40
break;
case 36:return 40
break;
case 37:return 42
break;
case 38:return 41
break;
case 39:return 44
break;
case 40:return 43
break;
case 41:return 39
break;
case 42:return 'BITAND'
break;
case 43:return 'BITOR'
break;
case 44:return 18
break;
case 45:return 20
break;
case 46:return 22
break;
case 47:return 24
break;
case 48:return 'COLON'
break;
case 49:return 6
break;
case 50:return 'DOLLAR'
break;
case 51:return 'QUESTION'
break;
case 52:return 'CARET'
break;
case 53:return 23
break;
case 54:return 5
break;
case 55:return 'INVALID'
break;
}
},
rules: [/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:CREATE\b)/i,/^(?:TABLE\b)/i,/^(?:DATABASE\b)/i,/^(?:DELETE\b)/i,/^(?:INSERT\b)/i,/^(?:UPDATE\b)/i,/^(?:SET\b)/i,/^(?:DROP\b)/i,/^(?:INTO\b)/i,/^(?:VALUES\b)/i,/^(?:SELECT\b)/i,/^(?:AS\b)/i,/^(?:FROM\b)/i,/^(?:JOIN\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:CROSS\b)/i,/^(?:ON\b)/i,/^(?:WHERE\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:BEGIN\b)/i,/^(?:COMMIT\b)/i,/^(?:[-]?(\d*[.])?\d+[eE]\d+)/i,/^(?:[-]?(\d*[.])?\d+)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}